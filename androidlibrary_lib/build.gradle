/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/
plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'com.palantir.git-version' version '3.0.0'
}

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}

//Get project details using gitVersion plugin
def projectDetails = versionDetails()

group = groupId

android {

    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)
    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
        testInstrumentationRunner(instrumentationRunner)
    }

    // set by command line arguments
    defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            minSdkVersion(uitestMinSDK)
            dimension 'testing'
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            matchingFallbacks = ['debug']
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
            matchingFallbacks = ['release']
        }
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
}


configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}


dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.fragment:fragment:1.3.6'
    implementation 'com.google.android.material:material:1.4.0'
    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:core:1.4.0'

}

publishing {
    repositories{
        maven {
            name = "GithubPackages"
            url = "https://maven.pkg.github.com/${System.getenv('GITHUB_ACTOR')}/androidlibrary"
            //This should be replaced with odk-x/androidlibrary. Should be hardcoded or use gitversion?

            credentials {
                username = System.getenv('GITHUB_ACTOR')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
    publications {
        aarRelease(MavenPublication) {
            groupId = "org.opendatakit"
            artifactId = 'androidlibrary_lib'
            version = "1.0.0-${projectDetails.gitHash}"
            afterEvaluate{
                artifact spawnSnapshotBasicArchives
            }
        }
        aarDebug(MavenPublication) {
            groupId = "org.opendatakit"
            artifactId = 'androidlibrary_lib'
            version = "1.0.0-debug-${projectDetails.gitHash}"
            afterEvaluate{
             artifact spawnSnapshotBasicArchives
            }

        }
    }
}

    task spawnSnapshotBasicArchives(type: Jar) {
        dependsOn('snapshotVersion')
        dependsOn('assembleSnapshotBasicDebug')
        dependsOn('assembleSnapshotBasicRelease')
        doLast {
            bundleSnapshotBasicReleaseAar.classifier snapshotRelease
            bundleSnapshotBasicDebugAar.classifier snapshotDebug

            publishing.publications.aarRelease.artifact bundleSnapshotBasicReleaseAar
            publishing.publications.aarDebug.artifact bundleSnapshotBasicDebugAar

            project.getArtifacts().add("default", bundleSnapshotBasicDebugAar)
        }
        archiveExtension = 'aar'
    }

    task spawnDemoBasicArchives(type: Jar) {
        dependsOn('snapshotVersion')
        dependsOn('assembleDemoBasicDebug')
        dependsOn('assembleDemoBasicRelease')
        doLast {
            bundleDemoBasicReleaseAar.classifier demoRelease
            bundleDemoBasicDebugAar.classifier demoDebug

            publishing.publications.aarRelease.artifact bundleDemoBasicReleaseAar
            publishing.publications.aarDebug.artifact bundleDemoBasicDebugAar

            project.getArtifacts().add("default", bundleDemoBasicDebugAar)
        }
        archiveExtension = 'aar'
    }
publish.dependsOn(spawnSnapshotBasicArchives)

